(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{544:function(t,i,v){"use strict";v.r(i);var _=v(20),l=Object(_.a)({},(function(){var t=this,i=t._self._c;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("ol",[i("li",[t._v("自我介绍")]),t._v(" "),i("li",[t._v("还是在职是吧？")]),t._v(" "),i("li",[t._v("假设你做这个horeui组件库的话，亮点是什么，跟其他的相比你的亮点在哪？")])]),t._v(" "),i("ul",[i("li",[t._v("优化后的回答")])]),t._v(" "),i("ol",{attrs:{start:"4"}},[i("li",[t._v("微前端架构改进遇到的难点，是怎么解决的")])]),t._v(" "),i("ul",[i("li",[t._v("难点1：50 多个独立子项目采用烟囱式开发，导致代码重复严重，本地联调时需手动同步沙盒资源，效率极低")]),t._v(" "),i("li",[t._v("解决方案：主导 Webpack4 到 5 的升级，并引入 Module Federation 模块联邦架构，设计 “主应用 + 独立微应用” 模式。通过这种模式，子项目无需打包发版即可进行联调，大幅提升了资源加载速度，相比之前提升了 50%")]),t._v(" "),i("li",[t._v("难点2：跨项目端口冲突与资源冗余问题突出，严重影响开发效率")]),t._v(" "),i("li",[t._v("解决方案：开发基于 Monorepo（Lerna）的配套 CLI 工具链。自定义打包编译逻辑，利用 Express 中间件自动扫描 30 多个实例端口，动态替换主应用 HTML 资源引用。这一举措有效解决了跨项目端口冲突与资源冗余问题，实现了子项目启动时间从 60 秒缩短至 20 秒，本地联调效率提升 66%，有力支撑了 20 人团队的并行开发")])]),t._v(" "),i("ol",{attrs:{start:"5"}},[i("li",[t._v("主应用提交代码后生成一些模块，有做版本管理吗")]),t._v(" "),i("li",[t._v("taro不是也可以转成h5吗，为什么不把这个收款码页面也用taro转成h5")]),t._v(" "),i("li",[t._v("平常你的页面有异常错误的话你怎么做处理")]),t._v(" "),i("li",[t._v("script标签的defer和async有什么不一样")]),t._v(" "),i("li",[t._v("mobx的原理")]),t._v(" "),i("li",[t._v("内部它是怎么做到对状态的监听")]),t._v(" "),i("li",[t._v("监听了a，b，c三个变量，如果做到a改变的时候才让这个组件喧嚷")]),t._v(" "),i("li",[t._v("react中diff是怎么实现的")]),t._v(" "),i("li",[t._v("key是不是必须有的")]),t._v(" "),i("li",[t._v("列表纯展示的需要key吗")]),t._v(" "),i("li",[t._v("react为啥会有fiber")]),t._v(" "),i("li",[t._v("给一个span元素加上10像素的padding会有什么效果")]),t._v(" "),i("li",[t._v("页面的优化手段和排查手段")]),t._v(" "),i("li",[t._v("强缓存和协商缓存的区别")])]),t._v(" "),i("h3",{attrs:{id:"笔试题"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#笔试题"}},[t._v("#")]),t._v(" 笔试题")]),t._v(" "),i("ol",[i("li",[t._v("对象扁平化\nlet obj = { a:1, b:{ b1:3, b2:[{ b21:1, b22:1, b221:2, b221:[1,2,3], b223:{} }], 22 }, c:[1,2,3] }\n处理成\n{ a: 1, b.b1: 3, b.b2[0].b21: 1, b.b2[0].b22: 1, b.b2[0].b221: 2, b.b2[0].b221[0]: 1, b.b2[0].b221[1]: 2, b.b2[0].b221[2]: 3, b.b2[0].b223: {}, b.22: 22, c[0]: 1, c[1]: 2, c[2]: 3 }")]),t._v(" "),i("li",[t._v("编辑距离\n百科定义：编辑距离，又称Levenshtein距离（也叫做Edit Distance），是指两个字符串之间，由一个转成另一个所需的最少编辑操作次数。如果它们的距离越大，说明它们越不同。许可的编辑操作包括将一个字符替换成另一个字符，插入一个字符，删除一个字符。 例如将kitten 字转成sitting： kitten (k→s) sitten (i→i) sittin (t→t) sitting (→g)")]),t._v(" "),i("li",[t._v("求数组的最大区间和\n输出一个 int 型数组的最大连续子数组（所有元素加和最大）各个元素之和\n输入：{1, 2, 5, -7, 8, -10}\n输出：9 (子数组为: {1, 2, 5, -7, 8})")])])])}),[],!1,null,null,null);i.default=l.exports}}]);